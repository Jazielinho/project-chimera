import torch

from chimera.models.image_encoder import ImageEncoder


def test_image_encoder_initialization():
    """
    Tests the initialization of the `ImageEncoder` object.

    This function ensures that an instance of `ImageEncoder` is properly
    configured with the required attributes and types during initialization.

    :return: None
    """
    encoder = ImageEncoder(embed_dim=256)
    assert encoder.num_features == 512  # ResNet18 features
    assert isinstance(encoder.backbone, torch.nn.Module)
    assert isinstance(encoder.projection, torch.nn.Sequential)


def test_image_encoder_output_shape():
    """
    Tests the output shape of an ImageEncoder. This test initializes an image
    encoder, processes a random input tensor, and verifies that the output shape
    matches the expected dimensions based on the batch size and embedding dimension.

    :return: None
    """
    batch_size = 4
    embed_dim = 256
    img_size = 224

    # Create a random input tensor
    x = torch.randn(batch_size, 3, img_size, img_size)

    # Initialize the encoder
    encoder = ImageEncoder(embed_dim=embed_dim)

    # Get output
    with torch.no_grad():
        output = encoder(x)

    # Check output shape
    assert output.shape == (batch_size, embed_dim)


def test_image_encoder_normalization():
    """
    Tests the normalization property of the output generated by the ImageEncoder.

    This function validates if the outputs of the `ImageEncoder` model are correctly normalized
    to have an L2 norm of approximately 1. It does so by generating a batch of random input
    tensors, passing them through the encoder, computing their L2 norms, and asserting if they
    conform to the expected normalization behavior.

    :return: None
    :rtype: None
    """
    batch_size = 4
    img_size = 224

    # Create a random input tensor
    x = torch.randn(batch_size, 3, img_size, img_size)

    # Initialize the encoder
    encoder = ImageEncoder()

    # Get output
    with torch.no_grad():
        output = encoder(x)

    # Calculate L2 norms
    norms = torch.norm(output, p=2, dim=1)

    # Check if all norms are approximately 1
    assert torch.allclose(norms, torch.ones_like(norms), atol=1e-6)


def test_image_encoder_freeze_backbone():
    """
    Tests the ``ImageEncoder`` class with both frozen and unfrozen backbone configurations. This function
    verifies whether the parameters of the model's backbone are correctly frozen or unfrozen based on the
    given configuration and ensures the projection head remains trainable regardless of the backbone's state.

    :return: None
    """
    # Test with frozen backbone (default)
    encoder_frozen = ImageEncoder(freeze_backbone=True)
    for param in encoder_frozen.backbone.parameters():
        assert not param.requires_grad

    # Projection head should be trainable
    for param in encoder_frozen.projection.parameters():
        assert param.requires_grad

    # Test with unfrozen backbone
    encoder_unfrozen = ImageEncoder(freeze_backbone=False)
    trainable_params = [
        param.requires_grad for param in encoder_unfrozen.backbone.parameters()
    ]
    assert any(trainable_params)  # At least some params should be trainable
